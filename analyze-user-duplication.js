// üîç AN√ÅLISE DE DUPLICA√á√ÉO POR USU√ÅRIO
// Script para analisar diferen√ßas entre usu√°rios no feed

console.log('üîç INICIANDO AN√ÅLISE DE DUPLICA√á√ÉO POR USU√ÅRIO...');

// Fun√ß√£o para interceptar logs e analisar
const originalLog = console.log;
const originalWarn = console.warn;
const originalError = console.error;

const userData = {
  holdboy: {
    saves: [],
    duplicates: [],
    errors: [],
    timestamps: []
  },
  rafaelrocha: {
    saves: [],
    duplicates: [],
    errors: [],
    timestamps: []
  }
};

console.log = function(...args) {
  const message = args.join(' ');
  
  // Interceptar saves do holdboy
  if (message.includes('holdboy') && message.includes('Map drop saved to localStorage')) {
    userData.holdboy.saves.push({
      timestamp: Date.now(),
      message: message
    });
    userData.holdboy.timestamps.push(Date.now());
  }
  
  // Interceptar saves do rafaelrocha
  if (message.includes('rafaelrocha') && message.includes('Map drop saved to localStorage')) {
    userData.rafaelrocha.saves.push({
      timestamp: Date.now(),
      message: message
    });
    userData.rafaelrocha.timestamps.push(Date.now());
  }
  
  // Interceptar duplica√ß√µes
  if (message.includes('DUPLICA√á√ÉO PREVENIDA') || message.includes('duplicada')) {
    if (message.includes('holdboy')) {
      userData.holdboy.duplicates.push({
        timestamp: Date.now(),
        message: message
      });
    }
    if (message.includes('rafaelrocha')) {
      userData.rafaelrocha.duplicates.push({
        timestamp: Date.now(),
        message: message
      });
    }
  }
  
  // Interceptar erros
  if (message.includes('ERROR') || message.includes('‚ùå')) {
    if (message.includes('holdboy')) {
      userData.holdboy.errors.push({
        timestamp: Date.now(),
        message: message
      });
    }
    if (message.includes('rafaelrocha')) {
      userData.rafaelrocha.errors.push({
        timestamp: Date.now(),
        message: message
      });
    }
  }
  
  originalLog.apply(console, args);
};

console.warn = function(...args) {
  const message = args.join(' ');
  
  if (message.includes('DUPLICA√á√ÉO') || message.includes('duplicada')) {
    if (message.includes('holdboy')) {
      userData.holdboy.duplicates.push({
        timestamp: Date.now(),
        message: message
      });
    }
    if (message.includes('rafaelrocha')) {
      userData.rafaelrocha.duplicates.push({
        timestamp: Date.now(),
        message: message
      });
    }
  }
  
  originalWarn.apply(console, args);
};

// Fun√ß√£o para analisar dados coletados
function analyzeUserData() {
  console.log('\nüìä AN√ÅLISE DE DADOS COLETADOS:');
  console.log('================================');
  
  // An√°lise do holdboy
  console.log('\nüë§ HOLDBOY:');
  console.log(`- Total de saves: ${userData.holdboy.saves.length}`);
  console.log(`- Total de duplica√ß√µes detectadas: ${userData.holdboy.duplicates.length}`);
  console.log(`- Total de erros: ${userData.holdboy.errors.length}`);
  
  if (userData.holdboy.timestamps.length > 1) {
    const intervals = [];
    for (let i = 1; i < userData.holdboy.timestamps.length; i++) {
      intervals.push(userData.holdboy.timestamps[i] - userData.holdboy.timestamps[i-1]);
    }
    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
    console.log(`- Intervalo m√©dio entre saves: ${Math.round(avgInterval)}ms`);
  }
  
  // An√°lise do rafaelrocha
  console.log('\nüë§ RAFAELROCHA:');
  console.log(`- Total de saves: ${userData.rafaelrocha.saves.length}`);
  console.log(`- Total de duplica√ß√µes detectadas: ${userData.rafaelrocha.duplicates.length}`);
  console.log(`- Total de erros: ${userData.rafaelrocha.errors.length}`);
  
  if (userData.rafaelrocha.timestamps.length > 1) {
    const intervals = [];
    for (let i = 1; i < userData.rafaelrocha.timestamps.length; i++) {
      intervals.push(userData.rafaelrocha.timestamps[i] - userData.rafaelrocha.timestamps[i-1]);
    }
    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
    console.log(`- Intervalo m√©dio entre saves: ${Math.round(avgInterval)}ms`);
  }
  
  // Compara√ß√£o
  console.log('\nüîç COMPARA√á√ÉO:');
  const holdboySuccessRate = userData.holdboy.saves.length / (userData.holdboy.saves.length + userData.holdboy.duplicates.length) * 100;
  const rafaelrochaSuccessRate = userData.rafaelrocha.saves.length / (userData.rafaelrocha.saves.length + userData.rafaelrocha.duplicates.length) * 100;
  
  console.log(`- Holdboy taxa de sucesso: ${holdboySuccessRate.toFixed(1)}%`);
  console.log(`- Rafaelrocha taxa de sucesso: ${rafaelrochaSuccessRate.toFixed(1)}%`);
  
  // Detalhes das duplica√ß√µes
  if (userData.rafaelrocha.duplicates.length > 0) {
    console.log('\n‚ö†Ô∏è DUPLICA√á√ïES DO RAFAELROCHA:');
    userData.rafaelrocha.duplicates.forEach((dup, index) => {
      console.log(`${index + 1}. ${new Date(dup.timestamp).toLocaleTimeString()}: ${dup.message}`);
    });
  }
  
  // Detalhes dos erros
  if (userData.rafaelrocha.errors.length > 0) {
    console.log('\n‚ùå ERROS DO RAFAELROCHA:');
    userData.rafaelrocha.errors.forEach((err, index) => {
      console.log(`${index + 1}. ${new Date(err.timestamp).toLocaleTimeString()}: ${err.message}`);
    });
  }
}

// Fun√ß√£o para limpar dados
function clearAnalysisData() {
  userData.holdboy = { saves: [], duplicates: [], errors: [], timestamps: [] };
  userData.rafaelrocha = { saves: [], duplicates: [], errors: [], timestamps: [] };
  console.log('üßπ Dados de an√°lise limpos');
}

// Fun√ß√£o para exportar dados
function exportAnalysisData() {
  const data = {
    timestamp: new Date().toISOString(),
    users: userData
  };
  
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `user-duplication-analysis-${Date.now()}.json`;
  a.click();
  URL.revokeObjectURL(url);
  
  console.log('üìÅ Dados exportados para download');
}

// Expor fun√ß√µes globalmente
window.analyzeUserData = analyzeUserData;
window.clearAnalysisData = clearAnalysisData;
window.exportAnalysisData = exportAnalysisData;

console.log('‚úÖ SISTEMA DE AN√ÅLISE ATIVO!');
console.log('üìã Comandos dispon√≠veis:');
console.log('  - analyzeUserData() - Analisar dados coletados');
console.log('  - clearAnalysisData() - Limpar dados');
console.log('  - exportAnalysisData() - Exportar dados');
console.log('\nüîç Agora fa√ßa algumas runs com ambos os usu√°rios e depois execute analyzeUserData()');