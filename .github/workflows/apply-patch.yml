Ran 2 terminal commands and thought for 11s
I fetched your latest repo state and saw deployment succeeded. I’m going to verify the Google start endpoint on the apex domain and check for a path typo in your repo, then provide exact fixes.

Ran: bash -lc "curl -sS -o /dev/null -w \"status=%{http... and thought for 26s
I'll check if a misnamed directory 'unctions' was created and then prepare a minimal patch to add the missing Google endpoints and migration, and to simplify the AuthModal.

Listed 34 items in 3 directories and thought for 55s
Encontrei o motivo do 404 no Google Start: o arquivo foi criado dentro de um diretório com erro de digitação (unctions/...) em vez de functions/.... O deploy foi ok, mas as Functions não viram esse endpoint. Vou te passar um patch simples que:
Adiciona os endpoints corretos em functions/api/auth/google/
Simplifica o AuthModal para botão único “Continuar com Google”
Cria uma migração para users.google_sub
Como aplicar (recomendado): use o workflow “Apply patch” que já está no seu repositório

GitHub → Actions → Apply patch → Run workflow
Cole o patch inteiro abaixo no campo “patch” e execute
Depois, faça o deploy no Cloudflare Pages (Production)
Patch (.diff)

diff --git a/client/src/components/AuthModal.tsx b/client/src/components/AuthModal.tsx
index 9f3b64d..0000000 100644
--- a/client/src/components/AuthModal.tsx
+++ b/client/src/components/AuthModal.tsx
@@ -1,166 +1,54 @@
-import { useState, useEffect } from "react";
-import { useAuth } from "@/hooks/use-auth";
+import { useState } from "react";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { Input } from "@/components/ui/input";
 import { Button } from "@/components/ui/button";
 import { useI18n } from "@/i18n";
 
 interface AuthModalProps {
   onClose: () => void;
   defaultMode?: 'login' | 'register' | 'forgot' | 'reset';
   defaultToken?: string;
 }
 
-export function AuthModal({ onClose, defaultMode, defaultToken }: AuthModalProps) {
-  const { register, login, requestReset, resetPassword } = useAuth();
-  const [mode, setMode] = useState<'login' | 'register' | 'forgot' | 'reset'>(defaultMode ?? 'login');
-  const [email, setEmail] = useState("");
-  const [username, setUsername] = useState("");
-  const [password, setPassword] = useState("");
-  const [token, setToken] = useState(defaultToken ?? "");
-  const [error, setError] = useState<string | null>(null);
-  const [info, setInfo] = useState<string | null>(null);
+export function AuthModal({ onClose }: AuthModalProps) {
+  const { t } = useI18n();
   const [loading, setLoading] = useState(false);
-  const { t } = useI18n();
 
-  useEffect(() => {
-    if (defaultMode) setMode(defaultMode);
-    if (defaultToken) setToken(defaultToken);
-  }, [defaultMode, defaultToken]);
-
-  const handleLogin = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await login(email, password);
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao autenticar");
-    else onClose();
-  };
-
-  const handleRegister = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await fetch('/api/auth/register', {
-      method: 'POST',
-      headers: { 'Content-Type': 'application/json' },
-      body: JSON.stringify({ email, username, password }),
-      credentials: 'include',
-    }).then(r => r.json()).catch(() => ({ ok: false }));
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao registrar");
-    else { setInfo("Conta criada. Faça login."); setMode('login'); }
-  };
-
-  const handleForgot = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await requestReset(email).catch(() => ({ ok: true }));
-    setLoading(false);
-    setInfo("Se o e-mail existir, enviamos o link de reset (verifique caixa de entrada e spam).");
-    if ((res as any)?.token) setToken((res as any).token);
-  };
-
-  const handleReset = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await resetPassword(token, password).catch(() => ({ ok: false, error: 'reset_failed' }));
-    setLoading(false);
-    if (!(res as any).ok) setError((res as any).error || 'reset_failed');
-    else { setInfo("Senha alterada. Faça login."); setMode('login'); }
-  };
+  const googleLogin = () => {
+    setLoading(true);
+    window.location.href = '/api/auth/google/start';
+  };
 
   return (
     <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
       <Card className="w-full max-w-sm bg-black border-gray-800">
         <CardHeader className="py-3">
           <CardTitle className="text-white text-base">{t('auth.title')}</CardTitle>
         </CardHeader>
         <CardContent className="space-y-3 pt-0">
-          {mode === 'login' && (
-            <form onSubmit={handleLogin} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={onClose} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">{t('auth.cancel')}</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : {t('auth.login')}}</Button>
-              </div>
-              <div className="flex justify-between text-xs text-white/70 pt-1">
-                <button type="button" onClick={() => setMode('register')} className="underline">Criar conta</button>
-                <button type="button" onClick={() => setMode('forgot')} className="underline">Esqueci a senha</button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'register' && (
-            <form onSubmit={handleRegister} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-xs text-white/70 mb-1">Nome de usuário</label>
-                <Input value={username} onChange={(e) => setUsername(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="seu nome" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Criar conta'}</Button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'forgot' && (
-            <form onSubmit={handleForgot} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Enviar link'}</Button>
-              </div>
-              <div className="text-[11px] text-white/60">Após receber o e-mail, clique no link; se necessário, cole o token abaixo.</div>
-              {token && (
-                <div className="text-[11px] text-white/80 break-all">Token (fallback): {token}</div>
-              )}
-            </form>
-          )}
-
-          {mode === 'reset' && (
-            <form onSubmit={handleReset} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Token</label>
-                <Input value={token} onChange={(e) => setToken(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="token de reset" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Nova senha</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder="nova senha" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Alterar senha'}</Button>
-              </div>
-            </form>
-          )}
+          <div className="space-y-2">
+            <Button type="button" onClick={googleLogin} className="w-full bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>
+              {loading ? '...' : 'Continuar com Google'}
+            </Button>
+            <Button type="button" onClick={onClose} className="w-full bg-white/10 text-white hover:bg-white/20 h-9 px-4">
+              {t('auth.cancel')}
+            </Button>
+            <p className="text-[11px] text-white/60 text-center">Use sua conta Google para entrar com segurança.</p>
+          </div>
         </CardContent>
       </Card>
     </div>
   );
 }
diff --git a/functions/_lib/migrations.ts b/functions/_lib/migrations.ts
index 2cbdf8b..0000000 100644
--- a/functions/_lib/migrations.ts
+++ b/functions/_lib/migrations.ts
@@ -67,6 +67,16 @@ const migrations: Migration[] = [
       `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_username ON users(username)`
     ],
   },
+  {
+    version: '2024-08-22_auth_v3_google',
+    statements: [
+      `ALTER TABLE users ADD COLUMN google_sub TEXT`,
+      `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_google_sub ON users(google_sub)
+         WHERE google_sub IS NOT NULL`
+    ],
+  },
 ];
 
 export async function ensureMigrations(env: Env): Promise<void> {
diff --git a/functions/api/auth/google/callback.ts b/functions/api/auth/google/callback.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/callback.ts
@@ -0,0 +1,93 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string; GOOGLE_CLIENT_SECRET?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+async function exchangeCodeForToken(code: string, clientId: string, clientSecret: string, redirectUri: string) {
+  const body = new URLSearchParams({
+    code,
+    client_id: clientId,
+    client_secret: clientSecret,
+    redirect_uri: redirectUri,
+    grant_type: 'authorization_code'
+  });
+  const res = await fetch('https://oauth2.googleapis.com/token', {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
+    body
+  });
+  if (!res.ok) throw new Error('Token exchange failed');
+  return res.json() as Promise<{ access_token: string }>;
+}
+
+async function fetchUserInfo(accessToken: string) {
+  const res = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
+    headers: { Authorization: `Bearer ${accessToken}` }
+  });
+  if (!res.ok) throw new Error('Userinfo failed');
+  return res.json() as Promise<{ sub: string; email: string; name?: string }>;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  const clientSecret = env.GOOGLE_CLIENT_SECRET;
+  if (!clientId || !clientSecret) return new Response('Missing Google credentials', { status: 500 });
+
+  const url = new URL(request.url);
+  const code = url.searchParams.get('code');
+  if (!code) return new Response('Missing code', { status: 400 });
+
+  const token = await exchangeCodeForToken(code, clientId, clientSecret, buildRedirectUri(request));
+  const profile = await fetchUserInfo(token.access_token);
+
+  const now = Date.now();
+  const bySub = await (env as any).DB.prepare(`SELECT id FROM users WHERE google_sub = ?`).bind(profile.sub).first<{ id: string }>();
+  let userId = bySub?.id;
+  if (!userId) {
+    const byEmail = await (env as any).DB.prepare(`SELECT id FROM users WHERE email = ?`).bind(profile.email.toLowerCase()).first<{ id: string }>();
+    if (byEmail?.id) {
+      userId = byEmail.id;
+      await (env as any).DB.prepare(`UPDATE users SET google_sub = ?, email_verified = 1 WHERE id = ?`).bind(profile.sub, userId).run();
+    } else {
+      userId = crypto.randomUUID();
+      const username = (profile.name || profile.email.split('@')[0]).slice(0, 30);
+      await (env as any).DB.prepare(
+        `INSERT INTO users(id, email, pass_hash, created_at, email_verified, username, google_sub)
+         VALUES (?, ?, '', ?, 1, ?, ?)`
+      ).bind(userId, profile.email.toLowerCase(), now, username, profile.sub).run();
+    }
+  }
+
+  const sessionId = crypto.randomUUID();
+  const expires = now + 1000 * 60 * 60 * 24 * 7;
+  await (env as any).DB.prepare(
+    `INSERT INTO sessions(session_id, user_id, created_at, expires_at) VALUES (?, ?, ?, ?)`
+  ).bind(sessionId, userId, now, expires).run();
+
+  const headers = new Headers({ 'Content-Type': 'text/html' });
+  const host = new URL(request.url).host;
+  const apex = host.replace(/^www\./, '');
+  const cookieDomain = `.${apex}`;
+  headers.append('Set-Cookie', `ps_session=${sessionId}; Path=/; Domain=${cookieDomain}; HttpOnly; Secure; SameSite=Lax; Max-Age=${60*60*24*7}`);
+  headers.append('Location', '/');
+  return new Response('<html><head><meta http-equiv="refresh" content="0;url=/"></head></html>', { status: 302, headers });
+}
diff --git a/functions/api/auth/google/start.ts b/functions/api/auth/google/start.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/start.ts
@@ -0,0 +1,18 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  if (!clientId) return new Response('Missing GOOGLE_CLIENT_ID', { status: 500 });
+  const redirectUri = buildRedirectUri(request);
+  const scope = encodeURIComponent('openid email profile');
+  const state = crypto.randomUUID();
+  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${scope}&state=${encodeURIComponent(state)}&prompt=consent`;
+  return Response.redirect(authUrl, 302);
+}
Depois de aplicar:

Pages → Settings → Environment variables:
GOOGLE_CLIENT_ID = seu client id
GOOGLE_CLIENT_SECRET = seu client secret
Pages → Settings → Functions → D1 bindings:
DB → seu banco D1
Trigger deployment (Production)
Teste rápido:

Abra https://www.profitshards.online/api/auth/google/start → faça login Google → deve voltar para /
Depois https://www.profitshards.online/api/auth/me → deve retornar { user: ... }
No site, clique em Entrar → modal com apenas “Continuar com Google”
Se quiser, apague depois o diretório errado unctions/ pelo GitHub (não afeta o deploy, mas limpa o repo).

https://github.com/PlayerDex1/site-google-auth/commit/48f9380f058830fbcfc78333a24f8a8d81d169f2
verifique isto
Used fetch_pull_request and thought for 31s
I'll clone the provided repository and inspect the specific commit, showing the changes and the relevant files (Google OAuth endpoints, migrations, and AuthModal) to verify correctness.

Ran: bash -lc "rm -rf /workspace/site-google-auth && gi... and thought for 21s
I tried to open that commit, but the repository PlayerDex1/site-google-auth is not accessible (likely private or the name/URL is wrong), so I can’t fetch or diff 48f9380f058830fbcfc78333a24f8a8d81d169f2.

Quick options:

Make the repo public or add access, or paste the diff here.
If that commit is a template you followed, validate it with this checklist:
What the commit must contain

functions/api/auth/google/start.ts:
Builds redirect URI as https://<host>/api/auth/google/callback
Redirects to Google OAuth with scope openid email profile
Uses GOOGLE_CLIENT_ID and calls ensureMigrations(env)
functions/api/auth/google/callback.ts:
Exchanges code for token using GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET
Fetches userinfo; upserts user by google_sub or email
Creates session and sets cookie with Domain=.profitshards.online, HttpOnly, Secure, SameSite=Lax
Calls ensureMigrations(env)
functions/_lib/migrations.ts:
Includes users.google_sub and a unique index on it (nullable-safe)
client/src/components/AuthModal.tsx:
Only shows “Continuar com Google” button, no email/senha UI
Environment/config checks

Cloudflare Pages:
Env vars: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET
D1 binding: DB
Google Console:
Authorized redirect URIs:
https://profitshards.online/api/auth/google/callback
https://www.profitshards.online/api/auth/google/callback
Test:
curl -i https://www.profitshards.online/api/auth/google/start → should 302 to accounts.google.com
After login, https://www.profitshards.online/api/auth/me → should return user
Nota: No seu repo principal encontrei um erro de digitação que causou 404: o arquivo foi criado em unctions/... (sem o “f”). Garanta que os arquivos estejam exatamente em functions/api/auth/google/start.ts e functions/api/auth/google/callback.ts. Depois disso, faça um deploy de produção e teste os endpoints acima.

podemos clonar isto e adicionar para nossa pagina? 
Thought for 12s
I'll check the exact path and filename of the misnamed Google start file so I can include its deletion in the patch and then prepare a single diff that adds the correct endpoints, updates migrations, simplifies the modal, and removes the bad file.

Ran: bash -lc "cd /workspace/ProfitShards && find uncti... and thought for 26s
Sim — não precisa clonar aquele repo. É mais simples “transplantar” só o que importa para o seu projeto atual.

Passos objetivos:

Remova o diretório errado unctions/ no GitHub (era um typo; as Functions só funcionam em functions/).
Adicione estes arquivos:
functions/api/auth/google/start.ts e functions/api/auth/google/callback.ts (são os dois endpoints do Google).
Atualize functions/_lib/migrations.ts para incluir a coluna users.google_sub (com índice único opcional).
Troque client/src/components/AuthModal.tsx por uma versão com apenas o botão “Continuar com Google”.
Cloudflare Pages → Settings:
Environment variables: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET
D1 binding: DB → seu banco
Faça deploy (Production) e teste:
https://www.profitshards.online/api/auth/google/start → login → deve voltar para /
https://www.profitshards.online/api/auth/me → deve retornar { user: ... }
Quer que eu gere um .diff pronto para aplicar? Diga “envie o patch” e eu mando um patch único que:

cria functions/api/auth/google/start.ts e callback.ts
adiciona a migração google_sub
simplifica o AuthModal.tsx
e inclui instrução para remover unctions/ no GitHub UI (remoção manual é mais segura).
envie o patch
Thought for 20s
antes de e enviar, analise tudo e veja se está de acordo com o que estavamos fazendo
Thought for 37s
Segue a checagem e o patch pronto.

Análise rápida (de acordo com o que combinamos)

Falta dos endpoints corretos: não existem functions/api/auth/google/start.ts e functions/api/auth/google/callback.ts no lugar certo. Existe um arquivo com erro de caminho e nome: unctions/.../start.ts: — isso explica o 404.
Migrações: functions/_lib/migrations.ts ainda não adiciona users.google_sub (precisamos incluir).
UI: client/src/components/AuthModal.tsx ainda exibe e‑mail/senha; vamos simplificar para apenas “Continuar com Google”.
Cookies e sessão: functions/api/auth/login.ts já usa Domain=.profitshards.online — manteremos o mesmo padrão no callback do Google.
Patch (patch.diff) Como aplicar:

Via git local:
Salve abaixo como patch.diff na raiz do repositório
Rode: git apply -p0 patch.diff && git commit -m "feat(auth): Google OAuth + google_sub + modal Google-only" && git push origin main
Depois, remova manualmente no GitHub o diretório errado unctions/ (Commit separado)
Ou via Actions “Apply patch” que você já tem: cole o conteúdo inteiro de patch.diff no campo “patch”.
diff --git a/client/src/components/AuthModal.tsx b/client/src/components/AuthModal.tsx
index 9f3b64d..0000000 100644
--- a/client/src/components/AuthModal.tsx
+++ b/client/src/components/AuthModal.tsx
@@ -1,166 +1,54 @@
-import { useState, useEffect } from "react";
-import { useAuth } from "@/hooks/use-auth";
+import { useState } from "react";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { Input } from "@/components/ui/input";
 import { Button } from "@/components/ui/button";
 import { useI18n } from "@/i18n";
 
 interface AuthModalProps {
   onClose: () => void;
   defaultMode?: 'login' | 'register' | 'forgot' | 'reset';
   defaultToken?: string;
 }
 
-export function AuthModal({ onClose, defaultMode, defaultToken }: AuthModalProps) {
-  const { register, login, requestReset, resetPassword } = useAuth();
-  const [mode, setMode] = useState<'login' | 'register' | 'forgot' | 'reset'>(defaultMode ?? 'login');
-  const [email, setEmail] = useState("");
-  const [username, setUsername] = useState("");
-  const [password, setPassword] = useState("");
-  const [token, setToken] = useState(defaultToken ?? "");
-  const [error, setError] = useState<string | null>(null);
-  const [info, setInfo] = useState<string | null>(null);
+export function AuthModal({ onClose }: AuthModalProps) {
+  const { t } = useI18n();
   const [loading, setLoading] = useState(false);
-  const { t } = useI18n();
 
-  useEffect(() => {
-    if (defaultMode) setMode(defaultMode);
-    if (defaultToken) setToken(defaultToken);
-  }, [defaultMode, defaultToken]);
-
-  const handleLogin = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await login(email, password);
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao autenticar");
-    else onClose();
-  };
-
-  const handleRegister = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await fetch('/api/auth/register', {
-      method: 'POST',
-      headers: { 'Content-Type': 'application/json' },
-      body: JSON.stringify({ email, username, password }),
-      credentials: 'include',
-    }).then(r => r.json()).catch(() => ({ ok: false }));
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao registrar");
-    else { setInfo("Conta criada. Faça login."); setMode('login'); }
-  };
-
-  const handleForgot = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await requestReset(email).catch(() => ({ ok: true }));
-    setLoading(false);
-    setInfo("Se o e-mail existir, enviamos o link de reset (verifique caixa de entrada e spam).");
-    if ((res as any)?.token) setToken((res as any).token);
-  };
-
-  const handleReset = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await resetPassword(token, password).catch(() => ({ ok: false, error: 'reset_failed' }));
-    setLoading(false);
-    if (!(res as any).ok) setError((res as any).error || 'reset_failed');
-    else { setInfo("Senha alterada. Faça login."); setMode('login'); }
-  };
+  const googleLogin = () => {
+    setLoading(true);
+    window.location.href = '/api/auth/google/start';
+  };
 
   return (
     <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
       <Card className="w-full max-w-sm bg-black border-gray-800">
         <CardHeader className="py-3">
           <CardTitle className="text-white text-base">{t('auth.title')}</CardTitle>
         </CardHeader>
         <CardContent className="space-y-3 pt-0">
-          {mode === 'login' && (
-            <form onSubmit={handleLogin} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={onClose} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">{t('auth.cancel')}</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : {t('auth.login')}}</Button>
-              </div>
-              <div className="flex justify-between text-xs text-white/70 pt-1">
-                <button type="button" onClick={() => setMode('register')} className="underline">Criar conta</button>
-                <button type="button" onClick={() => setMode('forgot')} className="underline">Esqueci a senha</button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'register' && (
-            <form onSubmit={handleRegister} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-xs text-white/70 mb-1">Nome de usuário</label>
-                <Input value={username} onChange={(e) => setUsername(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="seu nome" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Criar conta'}</Button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'forgot' && (
-            <form onSubmit={handleForgot} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Enviar link'}</Button>
-              </div>
-              <div className="text-[11px] text-white/60">Após receber o e-mail, clique no link; se necessário, cole o token abaixo.</div>
-              {token && (
-                <div className="text-[11px] text-white/80 break-all">Token (fallback): {token}</div>
-              )}
-            </form>
-          )}
-
-          {mode === 'reset' && (
-            <form onSubmit={handleReset} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Token</label>
-                <Input value={token} onChange={(e) => setToken(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="token de reset" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Nova senha</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder="nova senha" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Alterar senha'}</Button>
-              </div>
-            </form>
-          )}
+          <div className="space-y-2">
+            <Button type="button" onClick={googleLogin} className="w-full bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>
+              {loading ? '...' : 'Continuar com Google'}
+            </Button>
+            <Button type="button" onClick={onClose} className="w-full bg-white/10 text-white hover:bg-white/20 h-9 px-4">
+              {t('auth.cancel')}
+            </Button>
+            <p className="text-[11px] text-white/60 text-center">Use sua conta Google para entrar com segurança.</p>
+          </div>
         </CardContent>
       </Card>
     </div>
   );
 }
diff --git a/functions/_lib/migrations.ts b/functions/_lib/migrations.ts
index 2cbdf8b..0000000 100644
--- a/functions/_lib/migrations.ts
+++ b/functions/_lib/migrations.ts
@@ -67,6 +67,16 @@ const migrations: Migration[] = [
       `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_username ON users(username)`
     ],
   },
+  {
+    version: '2024-08-22_auth_v3_google',
+    statements: [
+      `ALTER TABLE users ADD COLUMN google_sub TEXT`,
+      `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_google_sub ON users(google_sub)
+         WHERE google_sub IS NOT NULL`
+    ],
+  },
 ];
 
 export async function ensureMigrations(env: Env): Promise<void> {
diff --git a/functions/api/auth/google/callback.ts b/functions/api/auth/google/callback.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/callback.ts
@@ -0,0 +1,93 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string; GOOGLE_CLIENT_SECRET?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+async function exchangeCodeForToken(code: string, clientId: string, clientSecret: string, redirectUri: string) {
+  const body = new URLSearchParams({
+    code,
+    client_id: clientId,
+    client_secret: clientSecret,
+    redirect_uri: redirectUri,
+    grant_type: 'authorization_code'
+  });
+  const res = await fetch('https://oauth2.googleapis.com/token', {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
+    body
+  });
+  if (!res.ok) throw new Error('Token exchange failed');
+  return res.json() as Promise<{ access_token: string }>;
+}
+
+async function fetchUserInfo(accessToken: string) {
+  const res = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
+    headers: { Authorization: `Bearer ${accessToken}` }
+  });
+  if (!res.ok) throw new Error('Userinfo failed');
+  return res.json() as Promise<{ sub: string; email: string; name?: string }>;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  const clientSecret = env.GOOGLE_CLIENT_SECRET;
+  if (!clientId || !clientSecret) return new Response('Missing Google credentials', { status: 500 });
+
+  const url = new URL(request.url);
+  const code = url.searchParams.get('code');
+  if (!code) return new Response('Missing code', { status: 400 });
+
+  const token = await exchangeCodeForToken(code, clientId, clientSecret, buildRedirectUri(request));
+  const profile = await fetchUserInfo(token.access_token);
+
+  const now = Date.now();
+  const bySub = await (env as any).DB.prepare(`SELECT id FROM users WHERE google_sub = ?`).bind(profile.sub).first<{ id: string }>();
+  let userId = bySub?.id;
+  if (!userId) {
+    const byEmail = await (env as any).DB.prepare(`SELECT id FROM users WHERE email = ?`).bind(profile.email.toLowerCase()).first<{ id: string }>();
+    if (byEmail?.id) {
+      userId = byEmail.id;
+      await (env as any).DB.prepare(`UPDATE users SET google_sub = ?, email_verified = 1 WHERE id = ?`).bind(profile.sub, userId).run();
+    } else {
+      userId = crypto.randomUUID();
+      const username = (profile.name || profile.email.split('@')[0]).slice(0, 30);
+      await (env as any).DB.prepare(
+        `INSERT INTO users(id, email, pass_hash, created_at, email_verified, username, google_sub)
+         VALUES (?, ?, '', ?, 1, ?, ?)`
+      ).bind(userId, profile.email.toLowerCase(), now, username, profile.sub).run();
+    }
+  }
+
+  const sessionId = crypto.randomUUID();
+  const expires = now + 1000 * 60 * 60 * 24 * 7;
+  await (env as any).DB.prepare(
+    `INSERT INTO sessions(session_id, user_id, created_at, expires_at) VALUES (?, ?, ?, ?)`
+  ).bind(sessionId, userId, now, expires).run();
+
+  const headers = new Headers({ 'Content-Type': 'text/html' });
+  const host = new URL(request.url).host;
+  const apex = host.replace(/^www\./, '');
+  const cookieDomain = `.${apex}`;
+  headers.append('Set-Cookie', `ps_session=${sessionId}; Path=/; Domain=${cookieDomain}; HttpOnly; Secure; SameSite=Lax; Max-Age=${60*60*24*7}`);
+  headers.append('Location', '/');
+  return new Response('<html><head><meta http-equiv="refresh" content="0;url=/"></head></html>', { status: 302, headers });
+}
diff --git a/functions/api/auth/google/start.ts b/functions/api/auth/google/start.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/start.ts
@@ -0,0 +1,18 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  if (!clientId) return new Response('Missing GOOGLE_CLIENT_ID', { status: 500 });
+  const redirectUri = buildRedirectUri(request);
+  const scope = encodeURIComponent('openid email profile');
+  const state = crypto.randomUUID();
+  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${scope}&state=${encodeURIComponent(state)}&prompt=consent`;
+  return Response.redirect(authUrl, 302);
+}
