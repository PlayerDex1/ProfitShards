name: Cloudflare setup (Pages + DNS)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  setup-cloudflare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Pages custom domains
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PAGES_PROJECT_NAME: ${{ secrets.PAGES_PROJECT_NAME }}
          PRIMARY_DOMAIN: ${{ secrets.PRIMARY_DOMAIN }}
          ALT_DOMAIN: ${{ secrets.ALT_DOMAIN }}
        run: |
          set -euxo pipefail
          api() {
            curl -sS -X "$1" "https://api.cloudflare.com/client/v4$2" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              -H "Content-Type: application/json" \
              ${3:+-d "$3"}
          }

          # Add/ensure primary domain
          if [ -n "${PRIMARY_DOMAIN:-}" ]; then
            echo "Adding primary domain: $PRIMARY_DOMAIN"
            api POST "/accounts/$CF_ACCOUNT_ID/pages/projects/$PAGES_PROJECT_NAME/domains" \
              "{\"domain\":\"$PRIMARY_DOMAIN\",\"primary\":true}" || true
          fi

          # Add/ensure alternate domain (www)
          if [ -n "${ALT_DOMAIN:-}" ]; then
            echo "Adding alternate domain: $ALT_DOMAIN"
            api POST "/accounts/$CF_ACCOUNT_ID/pages/projects/$PAGES_PROJECT_NAME/domains" \
              "{\"domain\":\"$ALT_DOMAIN\",\"primary\":false}" || true
          fi

      - name: Ensure DNS CNAME for www â†’ Pages default domain
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          PAGES_DEFAULT_DOMAIN: ${{ secrets.PAGES_DEFAULT_DOMAIN }} # e.g., profitshards.pages.dev
        run: |
          set -euxo pipefail
          api() {
            curl -sS -X "$1" "https://api.cloudflare.com/client/v4$2" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              -H "Content-Type: application/json" \
              ${3:+-d "$3"}
          }

          # Find existing www CNAME
          rec_id=$(api GET "/zones/$CF_ZONE_ID/dns_records?type=CNAME&name=www" | jq -r '.result[0].id // empty') || true
          if [ -n "$rec_id" ]; then
            echo "Updating existing www CNAME to $PAGES_DEFAULT_DOMAIN"
            api PUT "/zones/$CF_ZONE_ID/dns_records/$rec_id" \
              "{\"type\":\"CNAME\",\"name\":\"www\",\"content\":\"$PAGES_DEFAULT_DOMAIN\",\"proxied\":true}" >/dev/null
          else
            echo "Creating www CNAME to $PAGES_DEFAULT_DOMAIN"
            api POST "/zones/$CF_ZONE_ID/dns_records" \
              "{\"type\":\"CNAME\",\"name\":\"www\",\"content\":\"$PAGES_DEFAULT_DOMAIN\",\"proxied\":true}" >/dev/null
          fi

      - name: Ensure SPF and DMARC (MailChannels)
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          DMARC_RUA: ${{ secrets.DMARC_RUA }} # e-mail para reports, ex.: postmaster@profitshards.online
        run: |
          set -euxo pipefail
          api() {
            curl -sS -X "$1" "https://api.cloudflare.com/client/v4$2" \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              -H "Content-Type: application/json" \
              ${3:+-d "$3"}
          }

          # Upsert TXT SPF: @ v=spf1 include:mailchannels.net ~all
          spf_id=$(api GET "/zones/$CF_ZONE_ID/dns_records?type=TXT&name=@" | jq -r '.result[] | select(.content | test("v=spf1")) | .id' | head -n1) || true
          if [ -n "$spf_id" ]; then
            api PUT "/zones/$CF_ZONE_ID/dns_records/$spf_id" \
              "{\"type\":\"TXT\",\"name\":\"@\",\"content\":\"v=spf1 include:mailchannels.net ~all\"}" >/dev/null
          else
            api POST "/zones/$CF_ZONE_ID/dns_records" \
              "{\"type\":\"TXT\",\"name\":\"@\",\"content\":\"v=spf1 include:mailchannels.net ~all\"}" >/dev/null
          fi

          # Upsert TXT DMARC: _dmarc v=DMARC1; p=none; rua=mailto:DMARC_RUA
          dmarc_id=$(api GET "/zones/$CF_ZONE_ID/dns_records?type=TXT&name=_dmarc" | jq -r '.result[0].id // empty') || true
          dmarc_val="v=DMARC1; p=none; rua=mailto:${DMARC_RUA:-postmaster@localhost}"
          if [ -n "$dmarc_id" ]; then
            api PUT "/zones/$CF_ZONE_ID/dns_records/$dmarc_id" \
              "{\"type\":\"TXT\",\"name\":\"_dmarc\",\"content\":\"$dmarc_val\"}" >/dev/null
          else
            api POST "/zones/$CF_ZONE_ID/dns_records" \
              "{\"type\":\"TXT\",\"name\":\"_dmarc\",\"content\":\"$dmarc_val\"}" >/dev/null
          fi