diff --git a/functions/api/auth/login.ts b/functions/api/auth/login.ts
index 0000000..0000001 100644
--- a/functions/api/auth/login.ts
+++ b/functions/api/auth/login.ts
@@ -1,999 +1,999 @@
+import { ensureMigrations } from "../../_lib/migrations";
+
+export interface Env { DB: D1Database }
+
+async function sha256(input: string): Promise<string> {
+  const enc = new TextEncoder();
+  const data = enc.encode(input);
+  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
+  const hashArray = Array.from(new Uint8Array(hashBuffer));
+  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
+  return hashHex;
+}
+
+export async function onRequestPost({ env, request }: { env: Env; request: Request }) {
+  try {
+    await ensureMigrations(env as any);
+    const body = await request.json().catch(() => null) as { email?: string; password?: string } | null;
+    const email = (body?.email || '').trim().toLowerCase();
+    const password = body?.password || '';
+    if (!email || !password) {
+      return new Response(JSON.stringify({ error: 'missing_credentials' }), { status: 400, headers: { 'Content-Type': 'application/json' } });
+    }
+    const row = await (env as any).DB.prepare(`SELECT id, pass_hash FROM users WHERE email = ?`).bind(email).first<{ id: string; pass_hash: string }>();
+    if (!row) return new Response(JSON.stringify({ error: 'invalid_credentials' }), { status: 401, headers: { 'Content-Type': 'application/json' } });
+    const pass_hash = await sha256(password);
+    if (pass_hash !== row.pass_hash) return new Response(JSON.stringify({ error: 'invalid_credentials' }), { status: 401, headers: { 'Content-Type': 'application/json' } });
+
+    const sessionId = crypto.randomUUID();
+    const now = Date.now();
+    const expires = now + 1000 * 60 * 60 * 24 * 7; // 7 dias
+    await (env as any).DB.prepare(`INSERT INTO sessions(session_id, user_id, created_at, expires_at) VALUES (?, ?, ?, ?)`).bind(sessionId, row.id, now, expires).run();
+
+    const headers = new Headers({ 'Content-Type': 'application/json' });
+    // Cookie válido para apex e www (ex.: .profitshards.online)
+    const host = new URL(request.url).host;
+    const apex = host.replace(/^www\./, '');
+    const cookieDomain = `.${apex}`;
+    headers.append('Set-Cookie', `ps_session=${sessionId}; Path=/; Domain=${cookieDomain}; HttpOnly; Secure; SameSite=Lax; Max-Age=${60*60*24*7}`);
+
+    return new Response(JSON.stringify({ ok: true }), { headers });
+  } catch (err: any) {
+    return new Response(JSON.stringify({ error: String(err?.message || err) }), { status: 500, headers: { 'Content-Type': 'application/json' } });
+  }
+}
diff --git a/functions/api/auth/google/start.ts b/functions/api/auth/google/start.ts
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/functions/api/auth/google/start.ts
@@ -0,0 +1,35 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  if (!clientId) return new Response('Missing GOOGLE_CLIENT_ID', { status: 500 });
+  const redirectUri = buildRedirectUri(request);
+  const scope = encodeURIComponent('openid email profile');
+  const state = crypto.randomUUID();
+  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${scope}&state=${encodeURIComponent(state)}&prompt=consent`;
+  return Response.redirect(authUrl, 302);
+}
diff --git a/functions/api/auth/google/callback.ts b/functions/api/auth/google/callback.ts
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/functions/api/auth/google/callback.ts
@@ -0,0 +1,93 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string; GOOGLE_CLIENT_SECRET?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+async function exchangeCodeForToken(code: string, clientId: string, clientSecret: string, redirectUri: string) {
+  const body = new URLSearchParams({
+    code,
+    client_id: clientId,
+    client_secret: clientSecret,
+    redirect_uri: redirectUri,
+    grant_type: 'authorization_code'
+  });
+  const res = await fetch('https://oauth2.googleapis.com/token', {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
+    body
+  });
+  if (!res.ok) throw new Error('Token exchange failed');
+  return res.json() as Promise<{ access_token: string }>;
+}
+
+async function fetchUserInfo(accessToken: string) {
+  const res = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
+    headers: { Authorization: `Bearer ${accessToken}` }
+  });
+  if (!res.ok) throw new Error('Userinfo failed');
+  return res.json() as Promise<{ sub: string; email: string; name?: string }>;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  const clientSecret = env.GOOGLE_CLIENT_SECRET;
+  if (!clientId || !clientSecret) return new Response('Missing Google credentials', { status: 500 });
+
+  const url = new URL(request.url);
+  const code = url.searchParams.get('code');
+  if (!code) return new Response('Missing code', { status: 400 });
+
+  const token = await exchangeCodeForToken(code, clientId, clientSecret, buildRedirectUri(request));
+  const profile = await fetchUserInfo(token.access_token);
+
+  const now = Date.now();
+  const bySub = await (env as any).DB.prepare(`SELECT id FROM users WHERE google_sub = ?`).bind(profile.sub).first<{ id: string }>();
+  let userId = bySub?.id;
+  if (!userId) {
+    const byEmail = await (env as any).DB.prepare(`SELECT id FROM users WHERE email = ?`).bind(profile.email.toLowerCase()).first<{ id: string }>();
+    if (byEmail?.id) {
+      userId = byEmail.id;
+      await (env as any).DB.prepare(`UPDATE users SET google_sub = ?, email_verified = 1 WHERE id = ?`).bind(profile.sub, userId).run();
+    } else {
+      userId = crypto.randomUUID();
+      const username = (profile.name || profile.email.split('@')[0]).slice(0, 30);
+      await (env as any).DB.prepare(
+        `INSERT INTO users(id, email, pass_hash, created_at, email_verified, username, google_sub)
+         VALUES (?, ?, '', ?, 1, ?, ?)`
+      ).bind(userId, profile.email.toLowerCase(), now, username, profile.sub).run();
+    }
+  }
+
+  const sessionId = crypto.randomUUID();
+  const expires = now + 1000 * 60 * 60 * 24 * 7;
+  await (env as any).DB.prepare(
+    `INSERT INTO sessions(session_id, user_id, created_at, expires_at) VALUES (?, ?, ?, ?)`
+  ).bind(sessionId, userId, now, expires).run();
+
+  const headers = new Headers({ 'Content-Type': 'text/html' });
+  const host = new URL(request.url).host;
+  const apex = host.replace(/^www\./, '');
+  const cookieDomain = `.${apex}`;
+  headers.append('Set-Cookie', `ps_session=${sessionId}; Path=/; Domain=${cookieDomain}; HttpOnly; Secure; SameSite=Lax; Max-Age=${60*60*24*7}`);
+  headers.append('Location', '/');
+  return new Response('<html><head><meta http-equiv="refresh" content="0;url=/"></head></html>', { status: 302, headers });
+}
diff --git a/client/src/components/AuthModal.tsx b/client/src/components/AuthModal.tsx
index 0000000..3333333 100644
--- a/client/src/components/AuthModal.tsx
+++ b/client/src/components/AuthModal.tsx
@@ -1,999 +1,999 @@
+import { useState } from "react";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { useI18n } from "@/i18n";
+
+interface AuthModalProps {
+  onClose: () => void;
+  defaultMode?: 'login' | 'register' | 'forgot' | 'reset';
+  defaultToken?: string;
+}
+
+export function AuthModal({ onClose }: AuthModalProps) {
+  const { t } = useI18n();
+  const [loading, setLoading] = useState(false);
+
+  const googleLogin = () => {
+    setLoading(true);
+    window.location.href = '/api/auth/google/start';
+  };
+
+  return (
+    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
+      <Card className="w-full max-w-sm bg-black border-gray-800">
+        <CardHeader className="py-3">
+          <CardTitle className="text-white text-base">{t('auth.title')}</CardTitle>
+        </CardHeader>
+        <CardContent className="space-y-3 pt-0">
+          <div className="space-y-2">
+            <Button type="button" onClick={googleLogin} className="w-full bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>
+              {loading ? '...' : 'Continuar com Google'}
+            </Button>
+            <Button type="button" onClick={onClose} className="w-full bg-white/10 text-white hover:bg-white/20 h-9 px-4">
+              {t('auth.cancel')}
+            </Button>
+            <p className="text-[11px] text-white/60 text-center">Use sua conta Google para entrar com segurança.</p>
+          </div>
+        </CardContent>
+      </Card>
+    </div>
+  );
+}
diff --git a/client/src/components/AuthModal.tsx b/client/src/components/AuthModal.tsx
index 9f3b64d..0000000 100644
--- a/client/src/components/AuthModal.tsx
+++ b/client/src/components/AuthModal.tsx
@@ -1,166 +1,54 @@
-import { useState, useEffect } from "react";
-import { useAuth } from "@/hooks/use-auth";
+import { useState } from "react";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { Input } from "@/components/ui/input";
 import { Button } from "@/components/ui/button";
 import { useI18n } from "@/i18n";
 
 interface AuthModalProps {
   onClose: () => void;
   defaultMode?: 'login' | 'register' | 'forgot' | 'reset';
   defaultToken?: string;
 }
 
-export function AuthModal({ onClose, defaultMode, defaultToken }: AuthModalProps) {
-  const { register, login, requestReset, resetPassword } = useAuth();
-  const [mode, setMode] = useState<'login' | 'register' | 'forgot' | 'reset'>(defaultMode ?? 'login');
-  const [email, setEmail] = useState("");
-  const [username, setUsername] = useState("");
-  const [password, setPassword] = useState("");
-  const [token, setToken] = useState(defaultToken ?? "");
-  const [error, setError] = useState<string | null>(null);
-  const [info, setInfo] = useState<string | null>(null);
+export function AuthModal({ onClose }: AuthModalProps) {
+  const { t } = useI18n();
   const [loading, setLoading] = useState(false);
-  const { t } = useI18n();
 
-  useEffect(() => {
-    if (defaultMode) setMode(defaultMode);
-    if (defaultToken) setToken(defaultToken);
-  }, [defaultMode, defaultToken]);
-
-  const handleLogin = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await login(email, password);
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao autenticar");
-    else onClose();
-  };
-
-  const handleRegister = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await fetch('/api/auth/register', {
-      method: 'POST',
-      headers: { 'Content-Type': 'application/json' },
-      body: JSON.stringify({ email, username, password }),
-      credentials: 'include',
-    }).then(r => r.json()).catch(() => ({ ok: false }));
-    setLoading(false);
-    if (!res.ok) setError(res.error || "Erro ao registrar");
-    else { setInfo("Conta criada. Faça login."); setMode('login'); }
-  };
-
-  const handleForgot = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await requestReset(email).catch(() => ({ ok: true }));
-    setLoading(false);
-    setInfo("Se o e-mail existir, enviamos o link de reset (verifique caixa de entrada e spam).");
-    if ((res as any)?.token) setToken((res as any).token);
-  };
-
-  const handleReset = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setLoading(true); setError(null); setInfo(null);
-    const res = await resetPassword(token, password).catch(() => ({ ok: false, error: 'reset_failed' }));
-    setLoading(false);
-    if (!(res as any).ok) setError((res as any).error || 'reset_failed');
-    else { setInfo("Senha alterada. Faça login."); setMode('login'); }
-  };
+  const googleLogin = () => {
+    setLoading(true);
+    window.location.href = '/api/auth/google/start';
+  };
 
   return (
     <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
       <Card className="w-full max-w-sm bg-black border-gray-800">
         <CardHeader className="py-3">
           <CardTitle className="text-white text-base">{t('auth.title')}</CardTitle>
         </CardHeader>
         <CardContent className="space-y-3 pt-0">
-          {mode === 'login' && (
-            <form onSubmit={handleLogin} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={onClose} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">{t('auth.cancel')}</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : t('auth.login')}</Button>
-              </div>
-              <div className="flex justify-between text-xs text-white/70 pt-1">
-                <button type="button" onClick={() => setMode('register')} className="underline">Criar conta</button>
-                <button type="button" onClick={() => setMode('forgot')} className="underline">Esqueci a senha</button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'register' && (
-            <form onSubmit={handleRegister} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              <div>
-                <label className="block text-xs text-xs text-white/70 mb-1">Nome de usuário</label>
-                <Input value={username} onChange={(e) => setUsername(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="seu nome" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">{t('auth.password')}</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder={t('auth.password')} />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Criar conta'}</Button>
-              </div>
-            </form>
-          )}
-
-          {mode === 'forgot' && (
-            <form onSubmit={handleForgot} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Email</label>
-                <Input value={email} onChange={(e) => setEmail(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="you@example.com" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Enviar link'}</Button>
-              </div>
-              <div className="text-[11px] text-white/60">Após receber o e-mail, clique no link; se necessário, cole o token abaixo.</div>
-              {token && (
-                <div className="text-[11px] text-white/80 break-all">Token (fallback): {token}</div>
-              )}
-            </form>
-          )}
-
-          {mode === 'reset' && (
-            <form onSubmit={handleReset} className="space-y-3">
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Token</label>
-                <Input value={token} onChange={(e) => setToken(e.target.value)} className="bg-white/10 border-white/20 text-white h-9" placeholder="token de reset" />
-              </div>
-              <div>
-                <label className="block text-xs text-white/70 mb-1">Nova senha</label>
-                <Input value={password} onChange={(e) => setPassword(e.target.value)} type="password" className="bg-white/10 border-white/20 text-white h-9" placeholder="nova senha" />
-              </div>
-              {error && <p className="text-xs text-red-400">{error}</p>}
-              {info && <p className="text-xs text-green-400">{info}</p>}
-              <div className="flex gap-2 pt-1">
-                <Button type="button" onClick={() => setMode('login')} className="bg-white/10 text-white hover:bg-white/20 h-9 px-4">Voltar</Button>
-                <Button type="submit" className="bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>{loading ? '...' : 'Alterar senha'}</Button>
-              </div>
-            </form>
-          )}
+          <div className="space-y-2">
+            <Button type="button" onClick={googleLogin} className="w-full bg-white text-black hover:bg-white/90 h-9 px-4" disabled={loading}>
+              {loading ? '...' : 'Continuar com Google'}
+            </Button>
+            <Button type="button" onClick={onClose} className="w-full bg-white/10 text-white hover:bg-white/20 h-9 px-4">
+              {t('auth.cancel')}
+            </Button>
+            <p className="text-[11px] text-white/60 text-center">Use sua conta Google para entrar com segurança.</p>
+          </div>
         </CardContent>
       </Card>
     </div>
   );
 }
diff --git a/functions/_lib/migrations.ts b/functions/_lib/migrations.ts
index 2cbdf8b..0000000 100644
--- a/functions/_lib/migrations.ts
+++ b/functions/_lib/migrations.ts
@@ -67,6 +67,16 @@ const migrations: Migration[] = [
       `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_username ON users(username)`
     ],
   },
+  {
+    version: '2024-08-22_auth_v3_google',
+    statements: [
+      `ALTER TABLE users ADD COLUMN google_sub TEXT`,
+      `CREATE UNIQUE INDEX IF NOT EXISTS idx_users_google_sub ON users(google_sub)
+         WHERE google_sub IS NOT NULL`
+    ],
+  },
 ];
 
 export async function ensureMigrations(env: Env): Promise<void> {
diff --git a/functions/_routes.json b/functions/_routes.json
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/_routes.json
@@ -0,0 +1,5 @@
+{
+  "version": 1,
+  "include": ["/api/*"],
+  "exclude": []
+}
diff --git a/functions/api/auth/google/callback.ts b/functions/api/auth/google/callback.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/callback.ts
@@ -0,0 +1,93 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string; GOOGLE_CLIENT_SECRET?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+async function exchangeCodeForToken(code: string, clientId: string, clientSecret: string, redirectUri: string) {
+  const body = new URLSearchParams({
+    code,
+    client_id: clientId,
+    client_secret: clientSecret,
+    redirect_uri: redirectUri,
+    grant_type: 'authorization_code'
+  });
+  const res = await fetch('https://oauth2.googleapis.com/token', {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
+    body
+  });
+  if (!res.ok) throw new Error('Token exchange failed');
+  return res.json() as Promise<{ access_token: string }>;
+}
+
+async function fetchUserInfo(accessToken: string) {
+  const res = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
+    headers: { Authorization: `Bearer ${accessToken}` }
+  });
+  if (!res.ok) throw new Error('Userinfo failed');
+  return res.json() as Promise<{ sub: string; email: string; name?: string }>;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  const clientSecret = env.GOOGLE_CLIENT_SECRET;
+  if (!clientId || !clientSecret) return new Response('Missing Google credentials', { status: 500 });
+
+  const url = new URL(request.url);
+  const code = url.searchParams.get('code');
+  if (!code) return new Response('Missing code', { status: 400 });
+
+  const token = await exchangeCodeForToken(code, clientId, clientSecret, buildRedirectUri(request));
+  const profile = await fetchUserInfo(token.access_token);
+
+  const now = Date.now();
+  const bySub = await (env as any).DB.prepare(`SELECT id FROM users WHERE google_sub = ?`).bind(profile.sub).first<{ id: string }>();
+  let userId = bySub?.id;
+  if (!userId) {
+    const byEmail = await (env as any).DB.prepare(`SELECT id FROM users WHERE email = ?`).bind(profile.email.toLowerCase()).first<{ id: string }>();
+    if (byEmail?.id) {
+      userId = byEmail.id;
+      await (env as any).DB.prepare(`UPDATE users SET google_sub = ?, email_verified = 1 WHERE id = ?`).bind(profile.sub, userId).run();
+    } else {
+      userId = crypto.randomUUID();
+      const username = (profile.name || profile.email.split('@')[0]).slice(0, 30);
+      await (env as any).DB.prepare(
+        `INSERT INTO users(id, email, pass_hash, created_at, email_verified, username, google_sub)
+         VALUES (?, ?, '', ?, 1, ?, ?)`
+      ).bind(userId, profile.email.toLowerCase(), now, username, profile.sub).run();
+    }
+  }
+
+  const sessionId = crypto.randomUUID();
+  const expires = now + 1000 * 60 * 60 * 24 * 7;
+  await (env as any).DB.prepare(
+    `INSERT INTO sessions(session_id, user_id, created_at, expires_at) VALUES (?, ?, ?, ?)`
+  ).bind(sessionId, userId, now, expires).run();
+
+  const headers = new Headers({ 'Content-Type': 'text/html' });
+  const host = new URL(request.url).host;
+  const apex = host.replace(/^www\./, '');
+  const cookieDomain = `.${apex}`;
+  headers.append('Set-Cookie', `ps_session=${sessionId}; Path=/; Domain=${cookieDomain}; HttpOnly; Secure; SameSite=Lax; Max-Age=${60*60*24*7}`);
+  headers.append('Location', '/');
+  return new Response('<html><head><meta http-equiv="refresh" content="0;url=/"></head></html>', { status: 302, headers });
+}
diff --git a/functions/api/auth/google/start.ts b/functions/api/auth/google/start.ts
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/functions/api/auth/google/start.ts
@@ -0,0 +1,18 @@
+import { ensureMigrations } from "../../../_lib/migrations";
+
+export interface Env { DB: D1Database; GOOGLE_CLIENT_ID?: string }
+
+function buildRedirectUri(req: Request) {
+  const url = new URL(req.url);
+  return `${url.protocol}//${url.host}/api/auth/google/callback`;
+}
+
+export async function onRequestGet({ env, request }: { env: Env; request: Request }) {
+  await ensureMigrations(env as any);
+  const clientId = env.GOOGLE_CLIENT_ID;
+  if (!clientId) return new Response('Missing GOOGLE_CLIENT_ID', { status: 500 });
+  const redirectUri = buildRedirectUri(request);
+  const scope = encodeURIComponent('openid email profile');
+  const state = crypto.randomUUID();
+  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${scope}&state=${encodeURIComponent(state)}&prompt=consent`;
+  return Response.redirect(authUrl, 302);
+}
